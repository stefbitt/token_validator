name: Build docker image e deploy

on:
  pull_request:
    branches:
      - develop

jobs:
  docker-build-and-push:
    runs-on: ubuntu-latest
    #if: github.event.pull_request.head.repo.owner.login == github.repository_owner && github.event_name == 'pull_request' && github.event.pull_request.mergeable && success()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build with Maven
        run: mvn clean package

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push Docker image to ECR
        env:
          ECR_REGISTRY: 471112644854.dkr.ecr.us-east-1.amazonaws.com
          ECR_REPOSITORY: token-validator
          IMAGE_TAG: ${{ github.sha }}
        run: |
          IMAGE_TAG_SHORT=${IMAGE_TAG:0:8}
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG_SHORT .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG_SHORT

  deploy-infra:
    runs-on: ubuntu-latest
    needs: docker-build-and-push
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Initialize terraform
        run: cd infra && terraform init

      - name: Validate terraform
        run: cd infra && terraform validate

      - name: Plan terraform
        run: cd infra && terraform plan -var-file="terraform.tfvars" -out=tfplan

      - name: Apply terraform
        run: cd infra && terraform apply -auto-approve

  deploy-to-ecs:
    runs-on: ubuntu-latest
    needs: deploy-infra
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

#      - name: Deploy to Amazon ECS
#        run: |
#          TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition token-validator)
#          NEW_TASK_DEFINITION=$(echo $TASK_DEFINITION | jq --arg IMAGE "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG_SHORT" '.taskDefinition.containerDefinitions[0].image=$IMAGE')
#          aws ecs register-task-definition --cli-input-json "$NEW_TASK_DEFINITION"
#          aws ecs update-service --cluster cluster-ecs --service token-validator --force-new-deployment

      - name: Register ECS Task Definition
        run: |
          cat <<EOF > task-definition.json
          {
            "family": "token-validator",
            "networkMode": "awsvpc",
            "requiresCompatibilities": [
              "FARGATE"
            ],
            "cpu": "256",
            "memory": "512",
            "containerDefinitions": [
              {
                "name": "token-validator",
                "image": "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG_SHORT",
                "essential": true,
                "portMappings": [
                  {
                    "containerPort": 80,
                    "hostPort": 80
                  }
                ],
                "logConfiguration": {
                  "logDriver": "awslogs",
                  "options": {
                    "awslogs-group": "/ecs/service-token-validator",
                    "awslogs-region": "${{ secrets.AWS_REGION }}",
                    "awslogs-stream-prefix": "ecs"
                  }
                }
              }
            ],
            "executionRoleArn": "arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/ecsTaskExecutionRole",
          }
          EOF
          
          aws ecs register-task-definition --task-definition.json file://task-definition.json
          

      - name: Deploy to ECS
        run: |
          aws ecs update-service \
            --cluster cluster-ecs \
            --service token-validator \
            --force-new-deployment